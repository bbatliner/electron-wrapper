'use strict';

var fs = require('fs');
var path = require('path');
var app = require('app');  // Module to control application life.
var BrowserWindow = require('browser-window');  // Module to create native browser window.
var localShortcut = require('electron-localshortcut'); // Module to register keyboard shortcuts

// Report crashes to our server.
require('crash-reporter').start();

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
var mainWindow = null;

// Quit when all windows are closed.
app.on('window-all-closed', function() {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform != 'darwin') {
    app.quit();
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready', function() {
  // Thanks imskull! (https://github.com/atom/electron/issues/526#issuecomment-132942967)
  // Try to load saved window bounds
  var initPath = path.join(app.getDataPath(), 'init.json');
  var data;
  try {
    data = JSON.parse(fs.readFileSync(initPath, 'utf8'));
  }
  catch(e) { }

  // Create the browser window.
  var windowOpts = (data && data.bounds) ? data.bounds : { width: 800, height: 600 };
  windowOpts['auto-hide-menu-bar'] = true;
  windowOpts['web-preferences'] = { 'node-integration': false };
  mainWindow = new BrowserWindow(windowOpts);

  // and load the url ;)
  mainWindow.loadUrl('{{{url}}}');

  // Register common navigation shortcuts
  function goBack() {
    if (mainWindow.webContents.canGoBack()) {
      mainWindow.webContents.goBack();
    }
  }
  function goForward() {
    if (mainWindow.webContents.canGoForward()) {
      mainWindow.webContents.goForward();
    }
  }
  localShortcut.register(mainWindow, 'alt+left', goBack);
  localShortcut.register(mainWindow, 'alt+right', goForward);

  // Save the window bounds on close
  mainWindow.on('close', function() {
    var data = {
      bounds: mainWindow.getBounds()
    };
    fs.writeFileSync(initPath, JSON.stringify(data));
  });

  // Emitted when the window is closed.
  mainWindow.on('closed', function() {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    mainWindow = null;
  });
});
